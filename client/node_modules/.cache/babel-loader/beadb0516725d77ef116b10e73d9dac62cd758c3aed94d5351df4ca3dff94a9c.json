{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/Desktop/sc_cd/src/ScheduleCd.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./ScheduleCd.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 7;\nconst numCols = 10;\nconst stringArray = [\"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCC\", \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHRRRRR\", \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHPPPPP\", \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHHHHHH\"\n// ... (원하는 문자열을 추가해주세요)\n];\n\nconst generateEmptyBoard = () => {\n  return Array.from({\n    length: numRows\n  }, () => Array(numCols).fill(undefined));\n};\nconst ScheduleCd = () => {\n  _s();\n  const [board, setBoard] = useState(generateEmptyBoard());\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [stringIndex, setStringIndex] = useState(0);\n  const [recording, setRecording] = useState(false);\n  const recordingIndexRef = useRef(null);\n  const getImagePath = value => {\n    switch (value) {\n      // 이미지 경로 반환 로직은 그대로 유지\n      default:\n        return undefined;\n    }\n  };\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      console.log(\"intervalId:\", intervalId);\n      if (stringIndex < stringArray.length && !recording) {\n        // 배열에서 다음 문자열을 가져와서 보드를 업데이트합니다.\n        const nextString = stringArray[stringIndex];\n        const newBoard = generateEmptyBoard();\n        setBoard(prevBoard => {\n          // 이전 상태를 참조하여 업데이트\n          const newBoard = generateEmptyBoard();\n          for (let i = 0; i < nextString.length; i++) {\n            const inputValue = nextString[i];\n            const [row, col] = getRowColFromIndex(i);\n            newBoard[row][col] = inputValue;\n          }\n          return newBoard;\n        });\n\n        // 다음 문자열로 넘어갑니다.\n        setStringIndex(prevIndex => prevIndex + 1);\n      } else {\n        // 모든 문자열을 돌았을 때, interval을 정리하고 종료 메시지를 표시합니다.\n        clearInterval(intervalId);\n        setErrorMessage(\"정상적으로 종료되었음. 영규 보쌈 언제 먹을래?\");\n      }\n    }, 1000);\n    return () => {\n      // 컴포넌트가 언마운트되면 interval을 정리합니다.\n      clearInterval(intervalId);\n    };\n  }, [stringIndex, recording]);\n  const getRowColFromIndex = index => {\n    const row = Math.floor(index / numCols);\n    const col = index % numCols;\n    return [row, col];\n  };\n  const startRecording = async () => {\n    if (!recording) {\n      setRecording(true);\n      recordingIndexRef.current = stringIndex;\n    } else {\n      setRecording(false);\n      const endIndex = stringIndex - 1;\n      const recordedData = stringArray.slice(recordingIndexRef.current, endIndex + 1);\n\n      // recordedData와 endIndex를 사용하여 녹음 데이터를 블롭으로 변환\n      const audioBlob = new Blob(recordedData, {\n        type: \"audio/wav\"\n      });\n\n      // 여기에서 녹음된 데이터를 전송하는 로직을 추가\n      const formData = new FormData();\n      formData.append(\"audioBlob\", audioBlob);\n      try {\n        const response = await fetch(\"/api/upload-audio\", {\n          method: \"POST\",\n          body: formData\n        });\n        if (response.ok) {\n          // 서버로부터 새로운 stringArray를 받아옴\n          const newStringArray = await response.json();\n\n          // 다시 표시를 시작할 지점에서부터 다시 화면에 표시\n          setStringIndex(endIndex + 1);\n          setBoard(generateEmptyBoard());\n        } else {\n          console.error(\"녹음 데이터 업로드 실패\");\n        }\n      } catch (error) {\n        console.error(\"네트워크 오류\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ScheduleCd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"mapBoard\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [colIndex < numCols && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"vertical-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 42\n            }, this), rowIndex < numRows && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"horizontal-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 42\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: \"relative\"\n              },\n              children: cell && /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: getImagePath(cell) && /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: getImagePath(cell),\n                  alt: `Cell at (${rowIndex}, ${colIndex})`,\n                  className: `cell-image cell-image-${cell}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }, this)]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startRecording,\n        children: recording ? \"녹음 중지\" : \"녹음 시작\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(ScheduleCd, \"WumALIeSn8SbQ/eusqGdg3Ynatg=\");\n_c = ScheduleCd;\nexport default ScheduleCd;\nvar _c;\n$RefreshReg$(_c, \"ScheduleCd\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","numRows","numCols","stringArray","generateEmptyBoard","Array","from","length","fill","undefined","ScheduleCd","_s","board","setBoard","errorMessage","setErrorMessage","stringIndex","setStringIndex","recording","setRecording","recordingIndexRef","getImagePath","value","intervalId","setInterval","console","log","nextString","newBoard","prevBoard","i","inputValue","row","col","getRowColFromIndex","prevIndex","clearInterval","index","Math","floor","startRecording","current","endIndex","recordedData","slice","audioBlob","Blob","type","formData","FormData","append","response","fetch","method","body","ok","newStringArray","json","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","rowIndex","cell","colIndex","style","position","Fragment","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/macpro/Desktop/sc_cd/src/ScheduleCd.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./ScheduleCd.css\";\n\nconst numRows = 7;\nconst numCols = 10;\nconst stringArray = [\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCC\",\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHRRRRR\",\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHPPPPP\",\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHHHHHH\",\n  // ... (원하는 문자열을 추가해주세요)\n];\n\nconst generateEmptyBoard = () => {\n  return Array.from({ length: numRows }, () => Array(numCols).fill(undefined));\n};\n\nconst ScheduleCd = () => {\n  const [board, setBoard] = useState(generateEmptyBoard());\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [stringIndex, setStringIndex] = useState(0);\n  const [recording, setRecording] = useState(false);\n  const recordingIndexRef = useRef(null);\n\n  const getImagePath = (value) => {\n    switch (value) {\n      // 이미지 경로 반환 로직은 그대로 유지\n      default:\n        return undefined;\n    }\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      console.log(\"intervalId:\", intervalId);\n      if (stringIndex < stringArray.length && !recording) {\n        // 배열에서 다음 문자열을 가져와서 보드를 업데이트합니다.\n        const nextString = stringArray[stringIndex];\n        const newBoard = generateEmptyBoard();\n        setBoard((prevBoard) => {\n          // 이전 상태를 참조하여 업데이트\n          const newBoard = generateEmptyBoard();\n          for (let i = 0; i < nextString.length; i++) {\n            const inputValue = nextString[i];\n            const [row, col] = getRowColFromIndex(i);\n            newBoard[row][col] = inputValue;\n          }\n          return newBoard;\n        });\n\n        // 다음 문자열로 넘어갑니다.\n        setStringIndex((prevIndex) => prevIndex + 1);\n      } else {\n        // 모든 문자열을 돌았을 때, interval을 정리하고 종료 메시지를 표시합니다.\n        clearInterval(intervalId);\n        setErrorMessage(\"정상적으로 종료되었음. 영규 보쌈 언제 먹을래?\");\n      }\n    }, 1000);\n\n    return () => {\n      // 컴포넌트가 언마운트되면 interval을 정리합니다.\n      clearInterval(intervalId);\n    };\n  }, [stringIndex, recording]);\n\n  const getRowColFromIndex = (index) => {\n    const row = Math.floor(index / numCols);\n    const col = index % numCols;\n    return [row, col];\n  };\n\n  const startRecording = async () => {\n    if (!recording) {\n      setRecording(true);\n      recordingIndexRef.current = stringIndex;\n    } else {\n      setRecording(false);\n      const endIndex = stringIndex - 1;\n      const recordedData = stringArray.slice(\n        recordingIndexRef.current,\n        endIndex + 1\n      );\n\n      // recordedData와 endIndex를 사용하여 녹음 데이터를 블롭으로 변환\n      const audioBlob = new Blob(recordedData, { type: \"audio/wav\" });\n\n      // 여기에서 녹음된 데이터를 전송하는 로직을 추가\n      const formData = new FormData();\n      formData.append(\"audioBlob\", audioBlob);\n\n      try {\n        const response = await fetch(\"/api/upload-audio\", {\n          method: \"POST\",\n          body: formData,\n        });\n\n        if (response.ok) {\n          // 서버로부터 새로운 stringArray를 받아옴\n          const newStringArray = await response.json();\n\n          // 다시 표시를 시작할 지점에서부터 다시 화면에 표시\n          setStringIndex(endIndex + 1);\n          setBoard(generateEmptyBoard());\n        } else {\n          console.error(\"녹음 데이터 업로드 실패\");\n        }\n      } catch (error) {\n        console.error(\"네트워크 오류\", error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>ScheduleCd</h1>\n      <table className=\"mapBoard\">\n        <tbody>\n          {board.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell, colIndex) => (\n                <td key={colIndex}>\n                  {colIndex < numCols && <div className=\"vertical-line\" />}\n                  {rowIndex < numRows && <div className=\"horizontal-line\" />}\n                  <div style={{ position: \"relative\" }}>\n                    {cell && (\n                      <React.Fragment>\n                        {getImagePath(cell) && (\n                          <img\n                            src={getImagePath(cell)}\n                            alt={`Cell at (${rowIndex}, ${colIndex})`}\n                            className={`cell-image cell-image-${cell}`}\n                          />\n                        )}\n                      </React.Fragment>\n                    )}\n                  </div>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <div>\n        <button onClick={startRecording}>\n          {recording ? \"녹음 중지\" : \"녹음 시작\"}\n        </button>\n      </div>\n\n      {errorMessage && <div className=\"error\">{errorMessage}</div>}\n    </div>\n  );\n};\n\nexport default ScheduleCd;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}