{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/Desktop/sc_cd/src/ScheduleCd.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./ScheduleCd.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 7;\nconst numCols = 10;\nconst stringArray = [\"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCC\", \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHRRRRR\", \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHPPPPP\", \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHHHHHH\"\n// ... (원하는 문자열을 추가해주세요)\n];\n\nconst generateEmptyBoard = () => {\n  const board = [];\n  for (let i = 0; i < numRows; i++) {\n    board.push(Array(numCols).fill(undefined));\n  }\n  return board;\n};\nconst ScheduleCd = () => {\n  _s();\n  const [board, setBoard] = useState(generateEmptyBoard());\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [stringIndex, setStringIndex] = useState(0);\n  const [recording, setRecording] = useState(false);\n  const recordingIndexRef = useRef(null);\n  const getImagePath = value => {\n    switch (value\n    // 이미지 경로 반환 로직은 그대로 유지\n    ) {}\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (stringIndex < stringArray.length && !recording) {\n        // 배열에서 다음 문자열을 가져와서 보드를 업데이트합니다.\n        const nextString = stringArray[stringIndex];\n        const newBoard = generateEmptyBoard();\n        for (let i = 0; i < nextString.length; i++) {\n          const inputValue = nextString[i];\n          const [row, col] = getRowColFromIndex(i);\n          newBoard[row][col] = inputValue;\n        }\n        setBoard(newBoard);\n\n        // 다음 문자열로 넘어갑니다.\n        setStringIndex(prevIndex => prevIndex + 1);\n      } else {\n        // 모든 문자열을 돌았을 때, interval을 정리하고 종료 메시지를 표시합니다.\n        clearInterval(intervalId);\n        setErrorMessage(\"정상적으로 종료되었음. 영규 보쌈 언제 먹을래?\");\n      }\n    }, 1000);\n    return () => {\n      // 컴포넌트가 언마운트되면 interval을 정리합니다.\n      clearInterval(intervalId);\n    };\n  }, [stringIndex, recording]);\n  const getRowColFromIndex = index => {\n    const row = Math.floor(index / numCols);\n    const col = index % numCols;\n    return [row, col];\n  };\n  const startRecording = async () => {\n    if (!recording) {\n      setRecording(true);\n      recordingIndexRef.current = stringIndex;\n    } else {\n      setRecording(false);\n      const endIndex = stringIndex - 1;\n      const recordedData = stringArray.slice(recordingIndexRef.current, endIndex + 1);\n\n      // recordedData와 endIndex를 사용하여 녹음 데이터를 블롭으로 변환\n      const audioBlob = new Blob(recordedData, {\n        type: \"audio/wav\"\n      });\n\n      // 여기에서 녹음된 데이터를 전송하는 로직을 추가\n      const formData = new FormData();\n      formData.append(\"audioBlob\", audioBlob);\n      try {\n        const response = await fetch(\"/api/upload-audio\", {\n          method: \"POST\",\n          body: formData\n        });\n        if (response.ok) {\n          // 서버로부터 새로운 stringArray를 받아옴\n          const newStringArray = await response.json();\n\n          // 다시 표시를 시작할 지점에서부터 다시 화면에 표시\n          setStringIndex(endIndex + 1);\n          setBoard(generateEmptyBoard());\n        } else {\n          console.error(\"녹음 데이터 업로드 실패\");\n        }\n      } catch (error) {\n        console.error(\"네트워크 오류\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ScheduleCd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"mapBoard\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [colIndex < numCols && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"vertical-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 42\n            }, this), rowIndex < numRows && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"horizontal-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 42\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                position: \"relative\"\n              },\n              children: cell && /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: getImagePath(cell) && /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: getImagePath(cell),\n                  alt: `Cell at (${rowIndex}, ${colIndex})`,\n                  className: `cell-image cell-image-${cell}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 19\n            }, this)]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startRecording,\n        children: recording ? \"녹음 중지\" : \"녹음 시작\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(ScheduleCd, \"WumALIeSn8SbQ/eusqGdg3Ynatg=\");\n_c = ScheduleCd;\nexport default ScheduleCd;\nvar _c;\n$RefreshReg$(_c, \"ScheduleCd\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","numRows","numCols","stringArray","generateEmptyBoard","board","i","push","Array","fill","undefined","ScheduleCd","_s","setBoard","errorMessage","setErrorMessage","stringIndex","setStringIndex","recording","setRecording","recordingIndexRef","getImagePath","value","intervalId","setInterval","length","nextString","newBoard","inputValue","row","col","getRowColFromIndex","prevIndex","clearInterval","index","Math","floor","startRecording","current","endIndex","recordedData","slice","audioBlob","Blob","type","formData","FormData","append","response","fetch","method","body","ok","newStringArray","json","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","rowIndex","cell","colIndex","style","position","Fragment","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/macpro/Desktop/sc_cd/src/ScheduleCd.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./ScheduleCd.css\";\n\nconst numRows = 7;\nconst numCols = 10;\nconst stringArray = [\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCC\",\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHRRRRR\",\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHPPPPP\",\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHHHHHH\",\n  // ... (원하는 문자열을 추가해주세요)\n];\n\nconst generateEmptyBoard = () => {\n  const board = [];\n  for (let i = 0; i < numRows; i++) {\n    board.push(Array(numCols).fill(undefined));\n  }\n  return board;\n};\n\nconst ScheduleCd = () => {\n  const [board, setBoard] = useState(generateEmptyBoard());\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [stringIndex, setStringIndex] = useState(0);\n  const [recording, setRecording] = useState(false);\n  const recordingIndexRef = useRef(null);\n\n  const getImagePath = (value) => {\n    switch (\n      value\n      // 이미지 경로 반환 로직은 그대로 유지\n    ) {\n    }\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (stringIndex < stringArray.length && !recording) {\n        // 배열에서 다음 문자열을 가져와서 보드를 업데이트합니다.\n        const nextString = stringArray[stringIndex];\n        const newBoard = generateEmptyBoard();\n        for (let i = 0; i < nextString.length; i++) {\n          const inputValue = nextString[i];\n          const [row, col] = getRowColFromIndex(i);\n          newBoard[row][col] = inputValue;\n        }\n        setBoard(newBoard);\n\n        // 다음 문자열로 넘어갑니다.\n        setStringIndex((prevIndex) => prevIndex + 1);\n      } else {\n        // 모든 문자열을 돌았을 때, interval을 정리하고 종료 메시지를 표시합니다.\n        clearInterval(intervalId);\n        setErrorMessage(\"정상적으로 종료되었음. 영규 보쌈 언제 먹을래?\");\n      }\n    }, 1000);\n\n    return () => {\n      // 컴포넌트가 언마운트되면 interval을 정리합니다.\n      clearInterval(intervalId);\n    };\n  }, [stringIndex, recording]);\n\n  const getRowColFromIndex = (index) => {\n    const row = Math.floor(index / numCols);\n    const col = index % numCols;\n    return [row, col];\n  };\n\n  const startRecording = async () => {\n    if (!recording) {\n      setRecording(true);\n      recordingIndexRef.current = stringIndex;\n    } else {\n      setRecording(false);\n      const endIndex = stringIndex - 1;\n      const recordedData = stringArray.slice(\n        recordingIndexRef.current,\n        endIndex + 1\n      );\n\n      // recordedData와 endIndex를 사용하여 녹음 데이터를 블롭으로 변환\n      const audioBlob = new Blob(recordedData, { type: \"audio/wav\" });\n\n      // 여기에서 녹음된 데이터를 전송하는 로직을 추가\n      const formData = new FormData();\n      formData.append(\"audioBlob\", audioBlob);\n\n      try {\n        const response = await fetch(\"/api/upload-audio\", {\n          method: \"POST\",\n          body: formData,\n        });\n\n        if (response.ok) {\n          // 서버로부터 새로운 stringArray를 받아옴\n          const newStringArray = await response.json();\n\n          // 다시 표시를 시작할 지점에서부터 다시 화면에 표시\n          setStringIndex(endIndex + 1);\n          setBoard(generateEmptyBoard());\n        } else {\n          console.error(\"녹음 데이터 업로드 실패\");\n        }\n      } catch (error) {\n        console.error(\"네트워크 오류\", error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>ScheduleCd</h1>\n      <table className=\"mapBoard\">\n        <tbody>\n          {board.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell, colIndex) => (\n                <td key={colIndex}>\n                  {colIndex < numCols && <div className=\"vertical-line\" />}\n                  {rowIndex < numRows && <div className=\"horizontal-line\" />}\n                  <td style={{ position: \"relative\" }}>\n                    {cell && (\n                      <React.Fragment>\n                        {getImagePath(cell) && (\n                          <img\n                            src={getImagePath(cell)}\n                            alt={`Cell at (${rowIndex}, ${colIndex})`}\n                            className={`cell-image cell-image-${cell}`}\n                          />\n                        )}\n                      </React.Fragment>\n                    )}\n                  </td>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <div>\n        <button onClick={startRecording}>\n          {recording ? \"녹음 중지\" : \"녹음 시작\"}\n        </button>\n      </div>\n\n      {errorMessage && <div className=\"error\">{errorMessage}</div>}\n    </div>\n  );\n};\n\nexport default ScheduleCd;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAG,CAAC;AACjB,MAAMC,OAAO,GAAG,EAAE;AAClB,MAAMC,WAAW,GAAG,CAClB,wEAAwE,EACxE,wEAAwE,EACxE,wEAAwE,EACxE;AACA;AAAA,CACD;;AAED,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAC/B,MAAMC,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,OAAO,EAAEK,CAAC,EAAE,EAAE;IAChCD,KAAK,CAACE,IAAI,CAACC,KAAK,CAACN,OAAO,CAAC,CAACO,IAAI,CAACC,SAAS,CAAC,CAAC;EAC5C;EACA,OAAOL,KAAK;AACd,CAAC;AAED,MAAMM,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACP,KAAK,EAAEQ,QAAQ,CAAC,GAAGjB,QAAQ,CAACQ,kBAAkB,CAAC,CAAC,CAAC;EACxD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACsB,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMwB,iBAAiB,GAAGtB,MAAM,CAAC,IAAI,CAAC;EAEtC,MAAMuB,YAAY,GAAIC,KAAK,IAAK;IAC9B,QACEA;IACA;IAAA,GAEF;EACF,CAAC;;EAEDzB,SAAS,CAAC,MAAM;IACd,MAAM0B,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnC,IAAIR,WAAW,GAAGb,WAAW,CAACsB,MAAM,IAAI,CAACP,SAAS,EAAE;QAClD;QACA,MAAMQ,UAAU,GAAGvB,WAAW,CAACa,WAAW,CAAC;QAC3C,MAAMW,QAAQ,GAAGvB,kBAAkB,CAAC,CAAC;QACrC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoB,UAAU,CAACD,MAAM,EAAEnB,CAAC,EAAE,EAAE;UAC1C,MAAMsB,UAAU,GAAGF,UAAU,CAACpB,CAAC,CAAC;UAChC,MAAM,CAACuB,GAAG,EAAEC,GAAG,CAAC,GAAGC,kBAAkB,CAACzB,CAAC,CAAC;UACxCqB,QAAQ,CAACE,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGF,UAAU;QACjC;QACAf,QAAQ,CAACc,QAAQ,CAAC;;QAElB;QACAV,cAAc,CAAEe,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;MAC9C,CAAC,MAAM;QACL;QACAC,aAAa,CAACV,UAAU,CAAC;QACzBR,eAAe,CAAC,4BAA4B,CAAC;MAC/C;IACF,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACX;MACAkB,aAAa,CAACV,UAAU,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,CAACP,WAAW,EAAEE,SAAS,CAAC,CAAC;EAE5B,MAAMa,kBAAkB,GAAIG,KAAK,IAAK;IACpC,MAAML,GAAG,GAAGM,IAAI,CAACC,KAAK,CAACF,KAAK,GAAGhC,OAAO,CAAC;IACvC,MAAM4B,GAAG,GAAGI,KAAK,GAAGhC,OAAO;IAC3B,OAAO,CAAC2B,GAAG,EAAEC,GAAG,CAAC;EACnB,CAAC;EAED,MAAMO,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACnB,SAAS,EAAE;MACdC,YAAY,CAAC,IAAI,CAAC;MAClBC,iBAAiB,CAACkB,OAAO,GAAGtB,WAAW;IACzC,CAAC,MAAM;MACLG,YAAY,CAAC,KAAK,CAAC;MACnB,MAAMoB,QAAQ,GAAGvB,WAAW,GAAG,CAAC;MAChC,MAAMwB,YAAY,GAAGrC,WAAW,CAACsC,KAAK,CACpCrB,iBAAiB,CAACkB,OAAO,EACzBC,QAAQ,GAAG,CACb,CAAC;;MAED;MACA,MAAMG,SAAS,GAAG,IAAIC,IAAI,CAACH,YAAY,EAAE;QAAEI,IAAI,EAAE;MAAY,CAAC,CAAC;;MAE/D;MACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEL,SAAS,CAAC;MAEvC,IAAI;QACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,EAAE;UAChDC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEN;QACR,CAAC,CAAC;QAEF,IAAIG,QAAQ,CAACI,EAAE,EAAE;UACf;UACA,MAAMC,cAAc,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;;UAE5C;UACArC,cAAc,CAACsB,QAAQ,GAAG,CAAC,CAAC;UAC5B1B,QAAQ,CAACT,kBAAkB,CAAC,CAAC,CAAC;QAChC,CAAC,MAAM;UACLmD,OAAO,CAACC,KAAK,CAAC,eAAe,CAAC;QAChC;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MACjC;IACF;EACF,CAAC;EAED,oBACExD,OAAA;IAAAyD,QAAA,gBACEzD,OAAA;MAAAyD,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnB7D,OAAA;MAAO8D,SAAS,EAAC,UAAU;MAAAL,QAAA,eACzBzD,OAAA;QAAAyD,QAAA,EACGpD,KAAK,CAAC0D,GAAG,CAAC,CAAClC,GAAG,EAAEmC,QAAQ,kBACvBhE,OAAA;UAAAyD,QAAA,EACG5B,GAAG,CAACkC,GAAG,CAAC,CAACE,IAAI,EAAEC,QAAQ,kBACtBlE,OAAA;YAAAyD,QAAA,GACGS,QAAQ,GAAGhE,OAAO,iBAAIF,OAAA;cAAK8D,SAAS,EAAC;YAAe;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EACvDG,QAAQ,GAAG/D,OAAO,iBAAID,OAAA;cAAK8D,SAAS,EAAC;YAAiB;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC1D7D,OAAA;cAAImE,KAAK,EAAE;gBAAEC,QAAQ,EAAE;cAAW,CAAE;cAAAX,QAAA,EACjCQ,IAAI,iBACHjE,OAAA,CAACL,KAAK,CAAC0E,QAAQ;gBAAAZ,QAAA,EACZpC,YAAY,CAAC4C,IAAI,CAAC,iBACjBjE,OAAA;kBACEsE,GAAG,EAAEjD,YAAY,CAAC4C,IAAI,CAAE;kBACxBM,GAAG,EAAG,YAAWP,QAAS,KAAIE,QAAS,GAAG;kBAC1CJ,SAAS,EAAG,yBAAwBG,IAAK;gBAAE;kBAAAP,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC5C;cACF;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACa;YACjB;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA,GAfEK,QAAQ;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAgBb,CACL;QAAC,GAnBKG,QAAQ;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAoBb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAER7D,OAAA;MAAAyD,QAAA,eACEzD,OAAA;QAAQwE,OAAO,EAAEnC,cAAe;QAAAoB,QAAA,EAC7BvC,SAAS,GAAG,OAAO,GAAG;MAAO;QAAAwC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAEL/C,YAAY,iBAAId,OAAA;MAAK8D,SAAS,EAAC,OAAO;MAAAL,QAAA,EAAE3C;IAAY;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzD,CAAC;AAEV,CAAC;AAACjD,EAAA,CAlIID,UAAU;AAAA8D,EAAA,GAAV9D,UAAU;AAoIhB,eAAeA,UAAU;AAAC,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}