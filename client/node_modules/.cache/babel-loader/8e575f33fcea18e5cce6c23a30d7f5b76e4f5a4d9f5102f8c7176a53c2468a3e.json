{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/Desktop/sc_cd/src/ScheduleCd.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./ScheduleCd.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 7;\nconst numCols = 10;\nconst stringArray = [\"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHH\", \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHH\"\n// ... (원하는 문자열을 추가해주세요)\n];\n\nconst generateEmptyBoard = () => {\n  const board = [];\n  for (let i = 0; i < numRows; i++) {\n    board.push(Array(numCols).fill(undefined));\n  }\n  return board;\n};\nconst ScheduleCd = () => {\n  _s();\n  const [board, setBoard] = useState(generateEmptyBoard());\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [stringIndex, setStringIndex] = useState(0);\n  const getImagePath = value => {\n    switch (value) {\n      case \"H\":\n        return process.env.PUBLIC_URL + \"/hazard.png\";\n      case \"C\":\n        return process.env.PUBLIC_URL + \"/colorblob.png\";\n      case \"R\":\n        return process.env.PUBLIC_URL + \"/robot.png\";\n      case \"P\":\n        return process.env.PUBLIC_URL + \"/point.png\";\n      case \"c\":\n      case \"h\":\n        return undefined;\n      default:\n        return \"\";\n    }\n  };\n  useEffect(() => {\n    // stringIndex가 배열 길이를 초과하면 종료\n    if (stringIndex >= stringArray.length) {\n      setErrorMessage(\"Animation completed. No more updates.\");\n      return;\n    }\n\n    // 배열에서 다음 문자열을 가져와서 보드를 업데이트합니다.\n    const nextString = stringArray[stringIndex];\n    const newBoard = generateEmptyBoard();\n    for (let i = 0; i < nextString.length; i++) {\n      const inputValue = nextString[i];\n      const [row, col] = getRowColFromIndex(i);\n      newBoard[row][col] = inputValue;\n    }\n    setBoard(newBoard);\n\n    // 다음 문자열로 넘어갑니다.\n    setStringIndex(prevIndex => prevIndex + 1);\n  }, [stringIndex]);\n  const getRowColFromIndex = index => {\n    const row = Math.floor(index / numCols);\n    const col = index % numCols;\n    return [row, col];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ScheduleCd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"mapBoard\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [colIndex < numCols && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"vertical-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 42\n            }, this), rowIndex < numRows && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"horizontal-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 42\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                position: \"relative\"\n              },\n              children: cell && /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: getImagePath(cell) && /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: getImagePath(cell),\n                  alt: `Cell at (${rowIndex}, ${colIndex})`,\n                  className: `cell-image cell-image-${cell}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 19\n            }, this)]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(ScheduleCd, \"QrZYSm+BRUWCrE9NhN8F9veXUQE=\");\n_c = ScheduleCd;\nexport default ScheduleCd;\nvar _c;\n$RefreshReg$(_c, \"ScheduleCd\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","numRows","numCols","stringArray","generateEmptyBoard","board","i","push","Array","fill","undefined","ScheduleCd","_s","setBoard","errorMessage","setErrorMessage","stringIndex","setStringIndex","getImagePath","value","process","env","PUBLIC_URL","length","nextString","newBoard","inputValue","row","col","getRowColFromIndex","prevIndex","index","Math","floor","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","rowIndex","cell","colIndex","style","position","Fragment","src","alt","_c","$RefreshReg$"],"sources":["/Users/macpro/Desktop/sc_cd/src/ScheduleCd.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./ScheduleCd.css\";\n\nconst numRows = 7;\nconst numCols = 10;\nconst stringArray = [\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHH\",\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHH\",\n  // ... (원하는 문자열을 추가해주세요)\n];\n\nconst generateEmptyBoard = () => {\n  const board = [];\n  for (let i = 0; i < numRows; i++) {\n    board.push(Array(numCols).fill(undefined));\n  }\n  return board;\n};\n\nconst ScheduleCd = () => {\n  const [board, setBoard] = useState(generateEmptyBoard());\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [stringIndex, setStringIndex] = useState(0);\n\n  const getImagePath = (value) => {\n    switch (value) {\n      case \"H\":\n        return process.env.PUBLIC_URL + \"/hazard.png\";\n      case \"C\":\n        return process.env.PUBLIC_URL + \"/colorblob.png\";\n      case \"R\":\n        return process.env.PUBLIC_URL + \"/robot.png\";\n      case \"P\":\n        return process.env.PUBLIC_URL + \"/point.png\";\n      case \"c\":\n      case \"h\":\n        return undefined;\n      default:\n        return \"\";\n    }\n  };\n\n  useEffect(() => {\n    // stringIndex가 배열 길이를 초과하면 종료\n    if (stringIndex >= stringArray.length) {\n      setErrorMessage(\"Animation completed. No more updates.\");\n      return;\n    }\n\n    // 배열에서 다음 문자열을 가져와서 보드를 업데이트합니다.\n    const nextString = stringArray[stringIndex];\n    const newBoard = generateEmptyBoard();\n    for (let i = 0; i < nextString.length; i++) {\n      const inputValue = nextString[i];\n      const [row, col] = getRowColFromIndex(i);\n      newBoard[row][col] = inputValue;\n    }\n    setBoard(newBoard);\n\n    // 다음 문자열로 넘어갑니다.\n    setStringIndex((prevIndex) => prevIndex + 1);\n  }, [stringIndex]);\n\n  const getRowColFromIndex = (index) => {\n    const row = Math.floor(index / numCols);\n    const col = index % numCols;\n    return [row, col];\n  };\n\n  return (\n    <div>\n      <h1>ScheduleCd</h1>\n      <table className=\"mapBoard\">\n        <tbody>\n          {board.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell, colIndex) => (\n                <td key={colIndex}>\n                  {colIndex < numCols && <div className=\"vertical-line\" />}\n                  {rowIndex < numRows && <div className=\"horizontal-line\" />}\n                  <td style={{ position: \"relative\" }}>\n                    {cell && (\n                      <React.Fragment>\n                        {getImagePath(cell) && (\n                          <img\n                            src={getImagePath(cell)}\n                            alt={`Cell at (${rowIndex}, ${colIndex})`}\n                            className={`cell-image cell-image-${cell}`}\n                          />\n                        )}\n                      </React.Fragment>\n                    )}\n                  </td>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {errorMessage && <div className=\"error\">{errorMessage}</div>}\n    </div>\n  );\n};\n\nexport default ScheduleCd;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAG,CAAC;AACjB,MAAMC,OAAO,GAAG,EAAE;AAClB,MAAMC,WAAW,GAAG,CAClB,mEAAmE,EACnE;AACA;AAAA,CACD;;AAED,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAC/B,MAAMC,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,OAAO,EAAEK,CAAC,EAAE,EAAE;IAChCD,KAAK,CAACE,IAAI,CAACC,KAAK,CAACN,OAAO,CAAC,CAACO,IAAI,CAACC,SAAS,CAAC,CAAC;EAC5C;EACA,OAAOL,KAAK;AACd,CAAC;AAED,MAAMM,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACP,KAAK,EAAEQ,QAAQ,CAAC,GAAGhB,QAAQ,CAACO,kBAAkB,CAAC,CAAC,CAAC;EACxD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC;EAEjD,MAAMqB,YAAY,GAAIC,KAAK,IAAK;IAC9B,QAAQA,KAAK;MACX,KAAK,GAAG;QACN,OAAOC,OAAO,CAACC,GAAG,CAACC,UAAU,GAAG,aAAa;MAC/C,KAAK,GAAG;QACN,OAAOF,OAAO,CAACC,GAAG,CAACC,UAAU,GAAG,gBAAgB;MAClD,KAAK,GAAG;QACN,OAAOF,OAAO,CAACC,GAAG,CAACC,UAAU,GAAG,YAAY;MAC9C,KAAK,GAAG;QACN,OAAOF,OAAO,CAACC,GAAG,CAACC,UAAU,GAAG,YAAY;MAC9C,KAAK,GAAG;MACR,KAAK,GAAG;QACN,OAAOZ,SAAS;MAClB;QACE,OAAO,EAAE;IACb;EACF,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACd;IACA,IAAIkB,WAAW,IAAIb,WAAW,CAACoB,MAAM,EAAE;MACrCR,eAAe,CAAC,uCAAuC,CAAC;MACxD;IACF;;IAEA;IACA,MAAMS,UAAU,GAAGrB,WAAW,CAACa,WAAW,CAAC;IAC3C,MAAMS,QAAQ,GAAGrB,kBAAkB,CAAC,CAAC;IACrC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,UAAU,CAACD,MAAM,EAAEjB,CAAC,EAAE,EAAE;MAC1C,MAAMoB,UAAU,GAAGF,UAAU,CAAClB,CAAC,CAAC;MAChC,MAAM,CAACqB,GAAG,EAAEC,GAAG,CAAC,GAAGC,kBAAkB,CAACvB,CAAC,CAAC;MACxCmB,QAAQ,CAACE,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGF,UAAU;IACjC;IACAb,QAAQ,CAACY,QAAQ,CAAC;;IAElB;IACAR,cAAc,CAAEa,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;EAC9C,CAAC,EAAE,CAACd,WAAW,CAAC,CAAC;EAEjB,MAAMa,kBAAkB,GAAIE,KAAK,IAAK;IACpC,MAAMJ,GAAG,GAAGK,IAAI,CAACC,KAAK,CAACF,KAAK,GAAG7B,OAAO,CAAC;IACvC,MAAM0B,GAAG,GAAGG,KAAK,GAAG7B,OAAO;IAC3B,OAAO,CAACyB,GAAG,EAAEC,GAAG,CAAC;EACnB,CAAC;EAED,oBACE5B,OAAA;IAAAkC,QAAA,gBACElC,OAAA;MAAAkC,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBtC,OAAA;MAAOuC,SAAS,EAAC,UAAU;MAAAL,QAAA,eACzBlC,OAAA;QAAAkC,QAAA,EACG7B,KAAK,CAACmC,GAAG,CAAC,CAACb,GAAG,EAAEc,QAAQ,kBACvBzC,OAAA;UAAAkC,QAAA,EACGP,GAAG,CAACa,GAAG,CAAC,CAACE,IAAI,EAAEC,QAAQ,kBACtB3C,OAAA;YAAAkC,QAAA,GACGS,QAAQ,GAAGzC,OAAO,iBAAIF,OAAA;cAAKuC,SAAS,EAAC;YAAe;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EACvDG,QAAQ,GAAGxC,OAAO,iBAAID,OAAA;cAAKuC,SAAS,EAAC;YAAiB;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC1DtC,OAAA;cAAI4C,KAAK,EAAE;gBAAEC,QAAQ,EAAE;cAAW,CAAE;cAAAX,QAAA,EACjCQ,IAAI,iBACH1C,OAAA,CAACJ,KAAK,CAACkD,QAAQ;gBAAAZ,QAAA,EACZhB,YAAY,CAACwB,IAAI,CAAC,iBACjB1C,OAAA;kBACE+C,GAAG,EAAE7B,YAAY,CAACwB,IAAI,CAAE;kBACxBM,GAAG,EAAG,YAAWP,QAAS,KAAIE,QAAS,GAAG;kBAC1CJ,SAAS,EAAG,yBAAwBG,IAAK;gBAAE;kBAAAP,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC5C;cACF;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACa;YACjB;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA,GAfEK,QAAQ;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAgBb,CACL;QAAC,GAnBKG,QAAQ;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAoBb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAEPxB,YAAY,iBAAId,OAAA;MAAKuC,SAAS,EAAC,OAAO;MAAAL,QAAA,EAAEpB;IAAY;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzD,CAAC;AAEV,CAAC;AAAC1B,EAAA,CApFID,UAAU;AAAAsC,EAAA,GAAVtC,UAAU;AAsFhB,eAAeA,UAAU;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}