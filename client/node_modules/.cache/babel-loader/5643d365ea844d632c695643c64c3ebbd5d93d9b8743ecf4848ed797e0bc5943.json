{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/Desktop/sc_cd/src/ScheduleCd.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./ScheduleCd.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 7;\nconst numCols = 10;\nconst generateEmptyBoard = () => {\n  const board = [];\n  for (let i = 0; i < numRows; i++) {\n    board.push(Array(numCols).fill(undefined));\n  }\n  return board;\n};\nconst ScheduleCd = ({\n  isPaused,\n  stoppedIndex,\n  stringArray\n}) => {\n  _s();\n  const [board, setBoard] = useState(generateEmptyBoard());\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [stringIndex, setStringIndex] = useState(0);\n  const stoppedString = stoppedIndex !== null ? stringArray[stoppedIndex] : null;\n  const getImagePath = value => {\n    switch (value) {\n      case \"H\":\n        return process.env.PUBLIC_URL + \"/hazard.png\";\n      case \"C\":\n        return process.env.PUBLIC_URL + \"/colorblob.png\";\n      case \"R\":\n        return process.env.PUBLIC_URL + \"/robot.png\";\n      case \"P\":\n        return process.env.PUBLIC_URL + \"/point.png\";\n      case \"c\":\n      case \"h\":\n        return undefined;\n      default:\n        return \"\";\n    }\n  };\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (!isPaused && stringIndex < stringArray.length) {\n        // 배열에서 다음 문자열을 가져와서 보드를 업데이트합니다.\n        const nextString = stringArray[stringIndex];\n        const newBoard = generateEmptyBoard();\n        for (let i = 0; i < nextString.length; i++) {\n          const inputValue = nextString[i];\n          const [row, col] = getRowColFromIndex(i);\n          newBoard[row][col] = inputValue;\n        }\n        setBoard(newBoard);\n\n        // 다음 문자열로 넘어갑니다.\n        setStringIndex(prevIndex => prevIndex + 1);\n      } else {\n        // 모든 문자열을 돌았을 때, interval을 정리하고 종료 메시지를 표시합니다.\n        clearInterval(intervalId);\n        setErrorMessage(\"정상적으로 종료되었음. 영규 보쌈 언제 먹을래?\");\n      }\n    }, 1000);\n    return () => {\n      // 컴포넌트가 언마운트되면 interval을 정리합니다.\n      clearInterval(intervalId);\n    };\n  }, [stringIndex, isPaused]);\n  const getRowColFromIndex = index => {\n    const row = Math.floor(index / numCols);\n    const col = index % numCols;\n    return [row, col];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [stoppedString && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: stoppedString\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ScheduleCd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"mapBoard\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [colIndex < numCols && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"vertical-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 42\n            }, this), rowIndex < numRows && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"horizontal-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 42\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                position: \"relative\"\n              },\n              children: cell && /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: getImagePath(cell) && /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: getImagePath(cell),\n                  alt: `Cell at (${rowIndex}, ${colIndex})`,\n                  className: `cell-image cell-image-${cell}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 19\n            }, this)]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(ScheduleCd, \"QrZYSm+BRUWCrE9NhN8F9veXUQE=\");\n_c = ScheduleCd;\nexport default ScheduleCd;\nvar _c;\n$RefreshReg$(_c, \"ScheduleCd\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","numRows","numCols","generateEmptyBoard","board","i","push","Array","fill","undefined","ScheduleCd","isPaused","stoppedIndex","stringArray","_s","setBoard","errorMessage","setErrorMessage","stringIndex","setStringIndex","stoppedString","getImagePath","value","process","env","PUBLIC_URL","intervalId","setInterval","length","nextString","newBoard","inputValue","row","col","getRowColFromIndex","prevIndex","clearInterval","index","Math","floor","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","rowIndex","cell","colIndex","style","position","Fragment","src","alt","_c","$RefreshReg$"],"sources":["/Users/macpro/Desktop/sc_cd/src/ScheduleCd.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./ScheduleCd.css\";\n\nconst numRows = 7;\nconst numCols = 10;\n\nconst generateEmptyBoard = () => {\n  const board = [];\n  for (let i = 0; i < numRows; i++) {\n    board.push(Array(numCols).fill(undefined));\n  }\n  return board;\n};\n\nconst ScheduleCd = ({ isPaused, stoppedIndex, stringArray }) => {\n  const [board, setBoard] = useState(generateEmptyBoard());\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [stringIndex, setStringIndex] = useState(0);\n  const stoppedString =\n    stoppedIndex !== null ? stringArray[stoppedIndex] : null;\n  const getImagePath = (value) => {\n    switch (value) {\n      case \"H\":\n        return process.env.PUBLIC_URL + \"/hazard.png\";\n      case \"C\":\n        return process.env.PUBLIC_URL + \"/colorblob.png\";\n      case \"R\":\n        return process.env.PUBLIC_URL + \"/robot.png\";\n      case \"P\":\n        return process.env.PUBLIC_URL + \"/point.png\";\n      case \"c\":\n      case \"h\":\n        return undefined;\n      default:\n        return \"\";\n    }\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (!isPaused && stringIndex < stringArray.length) {\n        // 배열에서 다음 문자열을 가져와서 보드를 업데이트합니다.\n        const nextString = stringArray[stringIndex];\n        const newBoard = generateEmptyBoard();\n        for (let i = 0; i < nextString.length; i++) {\n          const inputValue = nextString[i];\n          const [row, col] = getRowColFromIndex(i);\n          newBoard[row][col] = inputValue;\n        }\n        setBoard(newBoard);\n\n        // 다음 문자열로 넘어갑니다.\n        setStringIndex((prevIndex) => prevIndex + 1);\n      } else {\n        // 모든 문자열을 돌았을 때, interval을 정리하고 종료 메시지를 표시합니다.\n        clearInterval(intervalId);\n        setErrorMessage(\"정상적으로 종료되었음. 영규 보쌈 언제 먹을래?\");\n      }\n    }, 1000);\n\n    return () => {\n      // 컴포넌트가 언마운트되면 interval을 정리합니다.\n      clearInterval(intervalId);\n    };\n  }, [stringIndex, isPaused]);\n\n  const getRowColFromIndex = (index) => {\n    const row = Math.floor(index / numCols);\n    const col = index % numCols;\n    return [row, col];\n  };\n\n  return (\n    <div>\n      {stoppedString && <div>{stoppedString}</div>}\n      <h1>ScheduleCd</h1>\n      <table className=\"mapBoard\">\n        <tbody>\n          {board.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell, colIndex) => (\n                <td key={colIndex}>\n                  {colIndex < numCols && <div className=\"vertical-line\" />}\n                  {rowIndex < numRows && <div className=\"horizontal-line\" />}\n                  <td style={{ position: \"relative\" }}>\n                    {cell && (\n                      <React.Fragment>\n                        {getImagePath(cell) && (\n                          <img\n                            src={getImagePath(cell)}\n                            alt={`Cell at (${rowIndex}, ${colIndex})`}\n                            className={`cell-image cell-image-${cell}`}\n                          />\n                        )}\n                      </React.Fragment>\n                    )}\n                  </td>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {errorMessage && <div className=\"error\">{errorMessage}</div>}\n    </div>\n  );\n};\n\nexport default ScheduleCd;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}