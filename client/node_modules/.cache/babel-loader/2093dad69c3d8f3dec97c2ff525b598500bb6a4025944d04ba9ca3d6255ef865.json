{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/Desktop/sc_cd/src/ScheduleCd.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./ScheduleCd.css\";\n\n// 행과 열의 갯수를 정의합니다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 7;\nconst numCols = 10;\n\n// 빈 보드를 생성하는 함수입니다.\nconst generateEmptyBoard = () => {\n  const board = [];\n  for (let i = 0; i < numRows; i++) {\n    // 각 행을 빈 배열로 초기화하여 2차원 배열을 만듭니다.\n    board.push(Array(numCols).fill(0));\n  }\n  return board;\n};\nconst ScheduleCd = () => {\n  _s();\n  // 상태 변수를 사용하여 현재의 보드와 입력 값을 관리합니다.\n  const [board, setBoard] = useState(generateEmptyBoard());\n  const [inputSequence, setInputSequence] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const getImagePath = value => {\n    switch (value) {\n      case \"H\":\n        return process.env.PUBLIC_URL + \"/hazard.png\";\n      case \"C\":\n        return process.env.PUBLIC_URL + \"/colorblob.png\";\n      case \"R\":\n        return process.env.PUBLIC_URL + \"/robot.png\";\n      case \"P\":\n        return process.env.PUBLIC_URL + \"/point.png\";\n      default:\n        return \"0\";\n    }\n  };\n  useEffect(() => {\n    // 컴포넌트가 처음 마운트될 때만 실행되는 부분입니다.\n    // 초기 보드를 설정합니다.\n    const newBoard = [...board];\n    setBoard(newBoard);\n  }, []);\n\n  // 입력 값이 변경될 때 호출되는 함수입니다.\n  const handleInputChange = value => {\n    // 입력 값을 상태에 반영합니다.\n    setInputSequence(value);\n  };\n\n  // 입력 값을 처리하고 보드를 업데이트하는 함수입니다.\n  const handleInputSubmit = () => {\n    let result = inputSequence.split(\" \").join(\"\");\n    console.log(result.length);\n    console.log(result);\n\n    // 입력된 문자열이 유효한지 확인합니다.\n    if (/^[HCcRp]+$/i.test(result) && result.length === numRows * numCols) {\n      // 유효한 경우, 새로운 보드를 생성하고 입력 값을 보드에 채웁니다.\n      const newBoard = generateEmptyBoard();\n      for (let i = 0; i < result.length; i++) {\n        const inputValue = result[i];\n        const [row, col] = getRowColFromIndex(i);\n        newBoard[row][col] = inputValue;\n      }\n      // 업데이트된 보드를 상태에 반영합니다.\n      setBoard(newBoard);\n      // 에러 메시지를 초기화합니다.\n      setErrorMessage(\"\");\n    } else {\n      // 유효하지 않은 경우, 에러 메시지를 설정합니다.\n      setErrorMessage(\"Invalid input. Please enter valid characters (H, C, R, P, c, h) and make sure the input length is correct.\");\n    }\n  };\n\n  // 인덱스를 행과 열로 변환하는 함수입니다.\n  const getRowColFromIndex = index => {\n    const row = Math.floor(index / numCols);\n    const col = index % numCols;\n    return [row, col];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ScheduleCd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"mapBoard\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [colIndex < numCols - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"vertical-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 46\n            }, this), rowIndex < numRows - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"horizontal-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 21\n            }, this), cell && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: getImagePath(cell),\n              alt: `Cell at (${rowIndex}, ${colIndex})`,\n              className: \"cell-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 21\n            }, this)]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"submitSpace\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Enter 70 characters for the board:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          maxLength: numRows * numCols * 2,\n          value: inputSequence,\n          onChange: e => handleInputChange(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleInputSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(ScheduleCd, \"Z/HRryJ0kH4N5BFg8rtNIc+4k/0=\");\n_c = ScheduleCd;\nexport default ScheduleCd;\nvar _c;\n$RefreshReg$(_c, \"ScheduleCd\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","numRows","numCols","generateEmptyBoard","board","i","push","Array","fill","ScheduleCd","_s","setBoard","inputSequence","setInputSequence","errorMessage","setErrorMessage","getImagePath","value","process","env","PUBLIC_URL","newBoard","handleInputChange","handleInputSubmit","result","split","join","console","log","length","test","inputValue","row","col","getRowColFromIndex","index","Math","floor","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","rowIndex","cell","colIndex","src","alt","type","maxLength","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/macpro/Desktop/sc_cd/src/ScheduleCd.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./ScheduleCd.css\";\n\n// 행과 열의 갯수를 정의합니다.\nconst numRows = 7;\nconst numCols = 10;\n\n// 빈 보드를 생성하는 함수입니다.\nconst generateEmptyBoard = () => {\n  const board = [];\n  for (let i = 0; i < numRows; i++) {\n    // 각 행을 빈 배열로 초기화하여 2차원 배열을 만듭니다.\n    board.push(Array(numCols).fill(0));\n  }\n  return board;\n};\n\nconst ScheduleCd = () => {\n  // 상태 변수를 사용하여 현재의 보드와 입력 값을 관리합니다.\n  const [board, setBoard] = useState(generateEmptyBoard());\n  const [inputSequence, setInputSequence] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const getImagePath = (value) => {\n    switch (value) {\n      case \"H\":\n        return process.env.PUBLIC_URL + \"/hazard.png\";\n      case \"C\":\n        return process.env.PUBLIC_URL + \"/colorblob.png\";\n      case \"R\":\n        return process.env.PUBLIC_URL + \"/robot.png\";\n      case \"P\":\n        return process.env.PUBLIC_URL + \"/point.png\";\n      default:\n        return \"0\";\n    }\n  };\n\n  useEffect(() => {\n    // 컴포넌트가 처음 마운트될 때만 실행되는 부분입니다.\n    // 초기 보드를 설정합니다.\n    const newBoard = [...board];\n    setBoard(newBoard);\n  }, []);\n\n  // 입력 값이 변경될 때 호출되는 함수입니다.\n  const handleInputChange = (value) => {\n    // 입력 값을 상태에 반영합니다.\n    setInputSequence(value);\n  };\n\n  // 입력 값을 처리하고 보드를 업데이트하는 함수입니다.\n  const handleInputSubmit = () => {\n    let result = inputSequence.split(\" \").join(\"\");\n    console.log(result.length);\n    console.log(result);\n\n    // 입력된 문자열이 유효한지 확인합니다.\n    if (/^[HCcRp]+$/i.test(result) && result.length === numRows * numCols) {\n      // 유효한 경우, 새로운 보드를 생성하고 입력 값을 보드에 채웁니다.\n      const newBoard = generateEmptyBoard();\n      for (let i = 0; i < result.length; i++) {\n        const inputValue = result[i];\n        const [row, col] = getRowColFromIndex(i);\n        newBoard[row][col] = inputValue;\n      }\n      // 업데이트된 보드를 상태에 반영합니다.\n      setBoard(newBoard);\n      // 에러 메시지를 초기화합니다.\n      setErrorMessage(\"\");\n    } else {\n      // 유효하지 않은 경우, 에러 메시지를 설정합니다.\n      setErrorMessage(\n        \"Invalid input. Please enter valid characters (H, C, R, P, c, h) and make sure the input length is correct.\"\n      );\n    }\n  };\n\n  // 인덱스를 행과 열로 변환하는 함수입니다.\n  const getRowColFromIndex = (index) => {\n    const row = Math.floor(index / numCols);\n    const col = index % numCols;\n    return [row, col];\n  };\n\n  return (\n    <div>\n      <h1>ScheduleCd</h1>\n      {/* 보드를 테이블로 표시합니다. */}\n      <table className=\"mapBoard\">\n        <tbody>\n          {board.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell, colIndex) => (\n                <td key={colIndex}>\n                  {/* 수직선을 추가합니다. */}\n                  {colIndex < numCols - 1 && <div className=\"vertical-line\" />}\n                  {/* 수평선을 추가합니다. */}\n                  {rowIndex < numRows - 1 && (\n                    <div className=\"horizontal-line\" />\n                  )}\n                  {/* 각 셀에 이미지를 표시합니다. */}\n                  {cell && (\n                    <img\n                      src={getImagePath(cell)}\n                      alt={`Cell at (${rowIndex}, ${colIndex})`}\n                      className=\"cell-image\"\n                    />\n                  )}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {/* 에러 메시지를 표시합니다. */}\n      {errorMessage && <div className=\"error\">{errorMessage}</div>}\n\n      {/* 입력을 받는 부분입니다. */}\n      <div className=\"submitSpace\">\n        <label>\n          Enter 70 characters for the board:\n          {/* 입력값을 받는 input 요소입니다. */}\n          <input\n            type=\"text\"\n            maxLength={numRows * numCols * 2}\n            value={inputSequence}\n            onChange={(e) => handleInputChange(e.target.value)}\n          />\n          {/* 입력값을 처리하는 버튼입니다. */}\n          <button onClick={handleInputSubmit}>Submit</button>\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default ScheduleCd;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}