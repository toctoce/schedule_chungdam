{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/Desktop/sc_cd/src/MineSweeper.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 5; // 보드의 행 수\nconst numCols = 5; // 보드의 열 수\nconst numMines = 5; // 지뢰의 개수\n\nconst generateEmptyBoard = () => {\n  const board = [];\n  for (let i = 0; i < numRows; i++) {\n    board.push(Array(numCols).fill(0));\n  }\n  return board;\n};\nconst placeMines = board => {\n  let minesPlaced = 0;\n  while (minesPlaced < numMines) {\n    const row = Math.floor(Math.random() * numRows);\n    const col = Math.floor(Math.random() * numCols);\n    if (board[row][col] !== \"M\") {\n      board[row][col] = \"M\";\n      minesPlaced++;\n    }\n  }\n};\nconst countAdjacentMines = (board, row, col) => {\n  const directions = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n  let count = 0;\n  for (const [dx, dy] of directions) {\n    const newRow = row + dx;\n    const newCol = col + dy;\n    if (newRow >= 0 && newRow < numRows && newCol >= 0 && newCol < numCols) {\n      if (board[newRow][newCol] === \"M\") {\n        count++;\n      }\n    }\n  }\n  return count;\n};\nconst Minesweeper = () => {\n  _s();\n  const [board, setBoard] = useState(generateEmptyBoard());\n  useEffect(() => {\n    const newBoard = [...board];\n    placeMines(newBoard);\n    setBoard(newBoard);\n  }, []);\n  const handleCellClick = (row, col) => {\n    // TODO: Handle cell click logic\n    // - Check if the clicked cell is a mine or empty\n    // - If it's a mine, end the game\n    // - If it's empty, reveal the cell and update adjacent cells\n\n    // For now, let's just log the clicked cell's coordinates\n    console.log(`Clicked on cell (${row}, ${col})`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Minesweeper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            onClick: () => handleCellClick(rowIndex, colIndex),\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(Minesweeper, \"y+oLaGh2k9StiSwWa+oatUNNGwI=\");\n_c = Minesweeper;\nexport default Minesweeper;\nvar _c;\n$RefreshReg$(_c, \"Minesweeper\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","numRows","numCols","numMines","generateEmptyBoard","board","i","push","Array","fill","placeMines","minesPlaced","row","Math","floor","random","col","countAdjacentMines","directions","count","dx","dy","newRow","newCol","Minesweeper","_s","setBoard","newBoard","handleCellClick","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","cell","colIndex","onClick","_c","$RefreshReg$"],"sources":["/Users/macpro/Desktop/sc_cd/src/MineSweeper.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst numRows = 5; // 보드의 행 수\nconst numCols = 5; // 보드의 열 수\nconst numMines = 5; // 지뢰의 개수\n\nconst generateEmptyBoard = () => {\n  const board = [];\n  for (let i = 0; i < numRows; i++) {\n    board.push(Array(numCols).fill(0));\n  }\n  return board;\n};\n\nconst placeMines = (board) => {\n  let minesPlaced = 0;\n  while (minesPlaced < numMines) {\n    const row = Math.floor(Math.random() * numRows);\n    const col = Math.floor(Math.random() * numCols);\n    if (board[row][col] !== \"M\") {\n      board[row][col] = \"M\";\n      minesPlaced++;\n    }\n  }\n};\n\nconst countAdjacentMines = (board, row, col) => {\n  const directions = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n  ];\n\n  let count = 0;\n  for (const [dx, dy] of directions) {\n    const newRow = row + dx;\n    const newCol = col + dy;\n    if (newRow >= 0 && newRow < numRows && newCol >= 0 && newCol < numCols) {\n      if (board[newRow][newCol] === \"M\") {\n        count++;\n      }\n    }\n  }\n\n  return count;\n};\n\nconst Minesweeper = () => {\n  const [board, setBoard] = useState(generateEmptyBoard());\n\n  useEffect(() => {\n    const newBoard = [...board];\n    placeMines(newBoard);\n    setBoard(newBoard);\n  }, []);\n\n  const handleCellClick = (row, col) => {\n    // TODO: Handle cell click logic\n    // - Check if the clicked cell is a mine or empty\n    // - If it's a mine, end the game\n    // - If it's empty, reveal the cell and update adjacent cells\n\n    // For now, let's just log the clicked cell's coordinates\n    console.log(`Clicked on cell (${row}, ${col})`);\n  };\n\n  return (\n    <div>\n      <h1>Minesweeper</h1>\n      <table>\n        <tbody>\n          {board.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell, colIndex) => (\n                <td\n                  key={colIndex}\n                  onClick={() => handleCellClick(rowIndex, colIndex)}\n                >\n                  {cell}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Minesweeper;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}