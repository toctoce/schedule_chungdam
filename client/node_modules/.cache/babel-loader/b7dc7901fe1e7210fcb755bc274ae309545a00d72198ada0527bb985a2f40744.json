{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/Desktop/sc_cd/src/audioRecode.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AudioRecode = ({\n  onRecordingStop\n}) => {\n  _s();\n  const [stringIndex, setStringIndex] = useState(0);\n  const [stream, setStream] = useState();\n  const [media, setMedia] = useState();\n  const [onRec, setOnRec] = useState(true);\n  const [source, setSource] = useState();\n  const [analyser, setAnalyser] = useState();\n  const [audioUrl, setAudioUrl] = useState();\n  const [startIndex, setStartIndex] = useState(-1); // 초기값은 -1로 설정\n\n  const onRecAudio = () => {\n    setStringIndex(prevIndex => prevIndex + 1);\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\n    setAnalyser(analyser);\n    function makeSound(stream) {\n      const source = audioCtx.createMediaStreamSource(stream);\n      setSource(source);\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n    }\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      setStream(stream);\n      setMedia(mediaRecorder);\n      makeSound(stream);\n      analyser.onaudioprocess = function (e) {\n        if (e.playbackTime > 180) {\n          stream.getAudioTracks().forEach(function (track) {\n            track.stop();\n          });\n          mediaRecorder.stop();\n          analyser.disconnect();\n          audioCtx.createMediaStreamSource(stream).disconnect();\n          mediaRecorder.ondataavailable = function (e) {\n            setAudioUrl(e.data);\n            setOnRec(true);\n\n            // 중단된 시점의 recordingIndex를 전달\n            onRecordingStop(stringIndex);\n          };\n        } else {\n          setOnRec(false);\n        }\n      };\n\n      // 녹음이 시작될 때 현재의 stringIndex를 저장\n      setStartIndex(stringIndex);\n    });\n  };\n  const offRecAudio = () => {\n    media.ondataavailable = function (e) {\n      setAudioUrl(e.data);\n      setOnRec(true);\n\n      // 중단된 시점의 recordingIndex를 전달\n      onRecordingStop(stringIndex);\n    };\n    stream.getAudioTracks().forEach(function (track) {\n      track.stop();\n    });\n    media.stop();\n    analyser.disconnect();\n    source.disconnect();\n\n    // 녹음이 종료될 때 녹음 시작 시의 stringIndex와 함께 전송\n    if (startIndex !== -1) {\n      onRecordingStop(startIndex);\n    }\n  };\n  const onSubmitAudioFile = useCallback(() => {\n    if (audioUrl) {\n      console.log(URL.createObjectURL(audioUrl)); // 출력된 링크에서 녹음된 오디오 확인 가능\n    }\n\n    const sound = new File([audioUrl], \"soundBlob\", {\n      lastModified: new Date().getTime(),\n      type: \"audio\"\n    });\n    console.log(sound); // File 정보 출력\n  }, [audioUrl]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onRec ? onRecAudio : offRecAudio,\n      children: \"\\uB179\\uC74C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onSubmitAudioFile,\n      children: \"\\uACB0\\uACFC \\uD655\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(AudioRecode, \"bfeJLxrws/3if3dKffJHKU53jf0=\");\n_c = AudioRecode;\nexport default AudioRecode;\nvar _c;\n$RefreshReg$(_c, \"AudioRecode\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","Fragment","_Fragment","AudioRecode","onRecordingStop","_s","stringIndex","setStringIndex","stream","setStream","media","setMedia","onRec","setOnRec","source","setSource","analyser","setAnalyser","audioUrl","setAudioUrl","startIndex","setStartIndex","onRecAudio","prevIndex","audioCtx","window","AudioContext","webkitAudioContext","createScriptProcessor","makeSound","createMediaStreamSource","connect","destination","navigator","mediaDevices","getUserMedia","audio","then","mediaRecorder","MediaRecorder","start","onaudioprocess","e","playbackTime","getAudioTracks","forEach","track","stop","disconnect","ondataavailable","data","offRecAudio","onSubmitAudioFile","console","log","URL","createObjectURL","sound","File","lastModified","Date","getTime","type","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macpro/Desktop/sc_cd/src/audioRecode.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nconst AudioRecode = ({ onRecordingStop }) => {\n  const [stringIndex, setStringIndex] = useState(0);\n  const [stream, setStream] = useState();\n  const [media, setMedia] = useState();\n  const [onRec, setOnRec] = useState(true);\n  const [source, setSource] = useState();\n  const [analyser, setAnalyser] = useState();\n  const [audioUrl, setAudioUrl] = useState();\n  const [startIndex, setStartIndex] = useState(-1); // 초기값은 -1로 설정\n\n  const onRecAudio = () => {\n    setStringIndex((prevIndex) => prevIndex + 1);\n\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\n    setAnalyser(analyser);\n\n    function makeSound(stream) {\n      const source = audioCtx.createMediaStreamSource(stream);\n      setSource(source);\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n    }\n\n    navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      setStream(stream);\n      setMedia(mediaRecorder);\n      makeSound(stream);\n\n      analyser.onaudioprocess = function (e) {\n        if (e.playbackTime > 180) {\n          stream.getAudioTracks().forEach(function (track) {\n            track.stop();\n          });\n          mediaRecorder.stop();\n          analyser.disconnect();\n          audioCtx.createMediaStreamSource(stream).disconnect();\n\n          mediaRecorder.ondataavailable = function (e) {\n            setAudioUrl(e.data);\n            setOnRec(true);\n\n            // 중단된 시점의 recordingIndex를 전달\n            onRecordingStop(stringIndex);\n          };\n        } else {\n          setOnRec(false);\n        }\n      };\n\n      // 녹음이 시작될 때 현재의 stringIndex를 저장\n      setStartIndex(stringIndex);\n    });\n  };\n\n  const offRecAudio = () => {\n    media.ondataavailable = function (e) {\n      setAudioUrl(e.data);\n      setOnRec(true);\n\n      // 중단된 시점의 recordingIndex를 전달\n      onRecordingStop(stringIndex);\n    };\n\n    stream.getAudioTracks().forEach(function (track) {\n      track.stop();\n    });\n\n    media.stop();\n    analyser.disconnect();\n    source.disconnect();\n\n    // 녹음이 종료될 때 녹음 시작 시의 stringIndex와 함께 전송\n    if (startIndex !== -1) {\n      onRecordingStop(startIndex);\n    }\n  };\n\n  const onSubmitAudioFile = useCallback(() => {\n    if (audioUrl) {\n      console.log(URL.createObjectURL(audioUrl)); // 출력된 링크에서 녹음된 오디오 확인 가능\n    }\n    const sound = new File([audioUrl], \"soundBlob\", {\n      lastModified: new Date().getTime(),\n      type: \"audio\",\n    });\n    console.log(sound); // File 정보 출력\n  }, [audioUrl]);\n\n  return (\n    <>\n      <button onClick={onRec ? onRecAudio : offRecAudio}>녹음</button>\n      <button onClick={onSubmitAudioFile}>결과 확인</button>\n    </>\n  );\n};\n\nexport default AudioRecode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}