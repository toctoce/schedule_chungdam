{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/Desktop/sc_cd/src/ScheduleCd.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./ScheduleCd.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 7;\nconst numCols = 10;\nconst stringArray = [\"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCC\", \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHRRRRR\", \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHPPPPP\", \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHHHHHH\"\n// ... (원하는 문자열을 추가해주세요)\n];\n\nconst generateEmptyBoard = () => {\n  const board = [];\n  for (let i = 0; i < numRows; i++) {\n    board.push(Array(numCols).fill(undefined));\n  }\n  return board;\n};\nconst ScheduleCd = ({\n  recordingIndex\n}) => {\n  _s();\n  const [board, setBoard] = useState(generateEmptyBoard());\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [stringIndex, setStringIndex] = useState(0);\n  const onRecordingStop = useCallback(index => {\n    console.log(`Recording stopped at index: ${index}`);\n    setStringIndex(index);\n  }, []);\n  const getImagePath = value => {\n    switch (value) {\n      case \"H\":\n        return process.env.PUBLIC_URL + \"/hazard.png\";\n      case \"C\":\n        return process.env.PUBLIC_URL + \"/colorblob.png\";\n      case \"R\":\n        return process.env.PUBLIC_URL + \"/robot.png\";\n      case \"P\":\n        return process.env.PUBLIC_URL + \"/point.png\";\n      case \"c\":\n      case \"h\":\n        return undefined;\n      default:\n        return \"\";\n    }\n  };\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (stringIndex < stringArray.length) {\n        // 배열에서 다음 문자열을 가져와서 보드를 업데이트합니다.\n        const nextString = stringArray[stringIndex];\n        const newBoard = generateEmptyBoard();\n        for (let i = 0; i < nextString.length; i++) {\n          const inputValue = nextString[i];\n          const [row, col] = getRowColFromIndex(i);\n          newBoard[row][col] = inputValue;\n        }\n        setBoard(newBoard);\n\n        // 다음 문자열로 넘어갑니다.\n        setStringIndex(prevIndex => prevIndex + 1);\n      } else {\n        // 모든 문자열을 돌았을 때, interval을 정리하고 종료 메시지를 표시합니다.\n        clearInterval(intervalId);\n        setErrorMessage(\"정상적으로 종료되었음. 영규 보쌈 언제 먹을래?\");\n      }\n    }, 1000);\n    return () => {\n      // 컴포넌트가 언마운트되면 interval을 정리합니다.\n      clearInterval(intervalId);\n    };\n  }, [stringIndex, recordingIndex]);\n  useEffect(() => {\n    // recordingIndex가 변경될 때마다 백엔드로 전송하는 로직 추가\n    if (recordingIndex !== null) {\n      // 여기에 recordingIndex와 녹음 데이터를 백엔드로 전송하는 로직을 추가하세요.\n      // recordingIndex는 녹음이 시작된 지점의 stringIndex 입니다.\n      console.log(\"Recording stopped at index:\", recordingIndex);\n    }\n  }, [recordingIndex]);\n  const getRowColFromIndex = index => {\n    const row = Math.floor(index / numCols);\n    const col = index % numCols;\n    return [row, col];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ScheduleCd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"mapBoard\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [colIndex < numCols && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"vertical-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 42\n            }, this), rowIndex < numRows && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"horizontal-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 42\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                position: \"relative\"\n              },\n              children: cell && /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: getImagePath(cell) && /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: getImagePath(cell),\n                  alt: `Cell at (${rowIndex}, ${colIndex})`,\n                  className: `cell-image cell-image-${cell}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this)]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(AudioRecode, {\n      onRecordingStop: onRecordingStop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(ScheduleCd, \"sw2uW7NnOIIujsDqtMNvK7rzFQQ=\");\n_c = ScheduleCd;\nexport default ScheduleCd;\nvar _c;\n$RefreshReg$(_c, \"ScheduleCd\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","numRows","numCols","stringArray","generateEmptyBoard","board","i","push","Array","fill","undefined","ScheduleCd","recordingIndex","_s","setBoard","errorMessage","setErrorMessage","stringIndex","setStringIndex","onRecordingStop","useCallback","index","console","log","getImagePath","value","process","env","PUBLIC_URL","intervalId","setInterval","length","nextString","newBoard","inputValue","row","col","getRowColFromIndex","prevIndex","clearInterval","Math","floor","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","rowIndex","cell","colIndex","style","position","Fragment","src","alt","AudioRecode","_c","$RefreshReg$"],"sources":["/Users/macpro/Desktop/sc_cd/src/ScheduleCd.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./ScheduleCd.css\";\n\nconst numRows = 7;\nconst numCols = 10;\nconst stringArray = [\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCC\",\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHRRRRR\",\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHPPPPP\",\n  \"HHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHCCCCCHHHHHHHHHH\",\n  // ... (원하는 문자열을 추가해주세요)\n];\n\nconst generateEmptyBoard = () => {\n  const board = [];\n  for (let i = 0; i < numRows; i++) {\n    board.push(Array(numCols).fill(undefined));\n  }\n  return board;\n};\n\nconst ScheduleCd = ({ recordingIndex }) => {\n  const [board, setBoard] = useState(generateEmptyBoard());\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [stringIndex, setStringIndex] = useState(0);\n\n  const onRecordingStop = useCallback((index) => {\n    console.log(`Recording stopped at index: ${index}`);\n    setStringIndex(index);\n  }, []);\n\n  const getImagePath = (value) => {\n    switch (value) {\n      case \"H\":\n        return process.env.PUBLIC_URL + \"/hazard.png\";\n      case \"C\":\n        return process.env.PUBLIC_URL + \"/colorblob.png\";\n      case \"R\":\n        return process.env.PUBLIC_URL + \"/robot.png\";\n      case \"P\":\n        return process.env.PUBLIC_URL + \"/point.png\";\n      case \"c\":\n      case \"h\":\n        return undefined;\n      default:\n        return \"\";\n    }\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (stringIndex < stringArray.length) {\n        // 배열에서 다음 문자열을 가져와서 보드를 업데이트합니다.\n        const nextString = stringArray[stringIndex];\n        const newBoard = generateEmptyBoard();\n        for (let i = 0; i < nextString.length; i++) {\n          const inputValue = nextString[i];\n          const [row, col] = getRowColFromIndex(i);\n          newBoard[row][col] = inputValue;\n        }\n        setBoard(newBoard);\n\n        // 다음 문자열로 넘어갑니다.\n        setStringIndex((prevIndex) => prevIndex + 1);\n      } else {\n        // 모든 문자열을 돌았을 때, interval을 정리하고 종료 메시지를 표시합니다.\n        clearInterval(intervalId);\n        setErrorMessage(\"정상적으로 종료되었음. 영규 보쌈 언제 먹을래?\");\n      }\n    }, 1000);\n\n    return () => {\n      // 컴포넌트가 언마운트되면 interval을 정리합니다.\n      clearInterval(intervalId);\n    };\n  }, [stringIndex, recordingIndex]);\n\n  useEffect(() => {\n    // recordingIndex가 변경될 때마다 백엔드로 전송하는 로직 추가\n    if (recordingIndex !== null) {\n      // 여기에 recordingIndex와 녹음 데이터를 백엔드로 전송하는 로직을 추가하세요.\n      // recordingIndex는 녹음이 시작된 지점의 stringIndex 입니다.\n      console.log(\"Recording stopped at index:\", recordingIndex);\n    }\n  }, [recordingIndex]);\n\n  const getRowColFromIndex = (index) => {\n    const row = Math.floor(index / numCols);\n    const col = index % numCols;\n    return [row, col];\n  };\n\n  return (\n    <div>\n      <h1>ScheduleCd</h1>\n      <table className=\"mapBoard\">\n        <tbody>\n          {board.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell, colIndex) => (\n                <td key={colIndex}>\n                  {colIndex < numCols && <div className=\"vertical-line\" />}\n                  {rowIndex < numRows && <div className=\"horizontal-line\" />}\n                  <td style={{ position: \"relative\" }}>\n                    {cell && (\n                      <React.Fragment>\n                        {getImagePath(cell) && (\n                          <img\n                            src={getImagePath(cell)}\n                            alt={`Cell at (${rowIndex}, ${colIndex})`}\n                            className={`cell-image cell-image-${cell}`}\n                          />\n                        )}\n                      </React.Fragment>\n                    )}\n                  </td>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {errorMessage && <div className=\"error\">{errorMessage}</div>}\n      <AudioRecode onRecordingStop={onRecordingStop} />\n    </div>\n  );\n};\n\nexport default ScheduleCd;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}