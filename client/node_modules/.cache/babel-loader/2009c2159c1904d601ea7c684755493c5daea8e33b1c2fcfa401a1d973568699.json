{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/Desktop/sc_cd/src/audioRecode.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AudioRecode = ({\n  onRecordingStop\n}) => {\n  _s();\n  const [onRec, setOnRec] = useState(true);\n  const [audioUrl, setAudioUrl] = useState();\n  const [stringIndex, setStringIndex] = useState(0);\n  const [stream, setStream] = useState();\n  const [media, setMedia] = useState();\n  const [source, setSource] = useState();\n  const [analyser, setAnalyser] = useState();\n  const onRecAudio = () => {\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\n    setAnalyser(analyser);\n    function makeSound(stream) {\n      const source = audioCtx.createMediaStreamSource(stream);\n      setSource(source);\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n    }\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      setStream(stream);\n      setMedia(mediaRecorder);\n      makeSound(stream);\n      analyser.onaudioprocess = function (e) {\n        if (e.playbackTime > 180) {\n          stream.getAudioTracks().forEach(function (track) {\n            track.stop();\n          });\n          mediaRecorder.stop();\n          analyser.disconnect();\n          audioCtx.createMediaStreamSource(stream).disconnect();\n          mediaRecorder.ondataavailable = function (e) {\n            setAudioUrl(e.data);\n            setOnRec(true);\n          };\n\n          // 중단된 시점의 recordingIndex를 전달\n          onRecordingStop(stringIndex);\n        } else {\n          setOnRec(false);\n        }\n      };\n    });\n    setStringIndex(prevIndex => prevIndex + 1);\n  };\n  const offRecAudio = useCallback(() => {\n    media.ondataavailable = function (e) {\n      setAudioUrl(e.data);\n      setOnRec(true);\n    };\n    stream.getAudioTracks().forEach(function (track) {\n      track.stop();\n    });\n    media.stop();\n    analyser.disconnect();\n    source.disconnect();\n  }, [stream, media, analyser, source]);\n  const onSubmitAudioFile = useCallback(() => {\n    if (audioUrl) {\n      console.log(URL.createObjectURL(audioUrl));\n    }\n    const sound = new File([audioUrl], \"soundBlob\", {\n      lastModified: new Date().getTime(),\n      type: \"audio\"\n    });\n    console.log(sound);\n  }, [audioUrl]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onRec ? onRecAudio : offRecAudio,\n      children: onRec ? \"녹음 시작\" : \"녹음 중지\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), !onRec && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onSubmitAudioFile,\n      children: \"\\uACB0\\uACFC \\uD655\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true);\n};\n_s(AudioRecode, \"sWYDIKMn13AlBFvI3JcZn+mSOhY=\");\n_c = AudioRecode;\nexport default AudioRecode;\nvar _c;\n$RefreshReg$(_c, \"AudioRecode\");","map":{"version":3,"names":["React","useState","useCallback","jsxDEV","_jsxDEV","Fragment","_Fragment","AudioRecode","onRecordingStop","_s","onRec","setOnRec","audioUrl","setAudioUrl","stringIndex","setStringIndex","stream","setStream","media","setMedia","source","setSource","analyser","setAnalyser","onRecAudio","audioCtx","window","AudioContext","webkitAudioContext","createScriptProcessor","makeSound","createMediaStreamSource","connect","destination","navigator","mediaDevices","getUserMedia","audio","then","mediaRecorder","MediaRecorder","start","onaudioprocess","e","playbackTime","getAudioTracks","forEach","track","stop","disconnect","ondataavailable","data","prevIndex","offRecAudio","onSubmitAudioFile","console","log","URL","createObjectURL","sound","File","lastModified","Date","getTime","type","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macpro/Desktop/sc_cd/src/audioRecode.js"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\n\nconst AudioRecode = ({ onRecordingStop }) => {\n  const [onRec, setOnRec] = useState(true);\n  const [audioUrl, setAudioUrl] = useState();\n  const [stringIndex, setStringIndex] = useState(0);\n  const [stream, setStream] = useState();\n  const [media, setMedia] = useState();\n  const [source, setSource] = useState();\n  const [analyser, setAnalyser] = useState();\n\n  const onRecAudio = () => {\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\n    setAnalyser(analyser);\n\n    function makeSound(stream) {\n      const source = audioCtx.createMediaStreamSource(stream);\n      setSource(source);\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n    }\n\n    navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      setStream(stream);\n      setMedia(mediaRecorder);\n      makeSound(stream);\n\n      analyser.onaudioprocess = function (e) {\n        if (e.playbackTime > 180) {\n          stream.getAudioTracks().forEach(function (track) {\n            track.stop();\n          });\n          mediaRecorder.stop();\n          analyser.disconnect();\n          audioCtx.createMediaStreamSource(stream).disconnect();\n\n          mediaRecorder.ondataavailable = function (e) {\n            setAudioUrl(e.data);\n            setOnRec(true);\n          };\n\n          // 중단된 시점의 recordingIndex를 전달\n          onRecordingStop(stringIndex);\n        } else {\n          setOnRec(false);\n        }\n      };\n    });\n\n    setStringIndex((prevIndex) => prevIndex + 1);\n  };\n\n  const offRecAudio = useCallback(() => {\n    media.ondataavailable = function (e) {\n      setAudioUrl(e.data);\n      setOnRec(true);\n    };\n\n    stream.getAudioTracks().forEach(function (track) {\n      track.stop();\n    });\n\n    media.stop();\n    analyser.disconnect();\n    source.disconnect();\n  }, [stream, media, analyser, source]);\n\n  const onSubmitAudioFile = useCallback(() => {\n    if (audioUrl) {\n      console.log(URL.createObjectURL(audioUrl));\n    }\n    const sound = new File([audioUrl], \"soundBlob\", {\n      lastModified: new Date().getTime(),\n      type: \"audio\",\n    });\n    console.log(sound);\n  }, [audioUrl]);\n\n  return (\n    <>\n      <button onClick={onRec ? onRecAudio : offRecAudio}>\n        {onRec ? \"녹음 시작\" : \"녹음 중지\"}\n      </button>\n      {!onRec && <button onClick={onSubmitAudioFile}>결과 확인</button>}\n    </>\n  );\n};\n\nexport default AudioRecode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}