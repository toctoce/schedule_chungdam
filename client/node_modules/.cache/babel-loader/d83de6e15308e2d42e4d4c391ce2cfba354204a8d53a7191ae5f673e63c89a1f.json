{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/Desktop/sc_cd/src/audioRecode.js\",\n  _s = $RefreshSig$();\n// audioRecode.js\n\nimport React, { useState, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AudioRecord = ({\n  setPause,\n  onRecordingStop\n}) => {\n  _s();\n  const [stream, setStream] = useState();\n  const [media, setMedia] = useState();\n  const [onRec, setOnRec] = useState(true);\n  const [source, setSource] = useState();\n  const [analyser, setAnalyser] = useState();\n  const [audioUrl, setAudioUrl] = useState();\n  const onRecAudio = () => {\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\n    setAnalyser(analyser);\n    function makeSound(stream) {\n      const source = audioCtx.createMediaStreamSource(stream);\n      setSource(source);\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n    }\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      setStream(stream);\n      setMedia(mediaRecorder);\n      makeSound(stream);\n      analyser.onaudioprocess = function (e) {\n        if (e.playbackTime > 180) {\n          stream.getAudioTracks().forEach(function (track) {\n            track.stop();\n          });\n          mediaRecorder.stop();\n          analyser.disconnect();\n          audioCtx.createMediaStreamSource(stream).disconnect();\n          mediaRecorder.ondataavailable = function (e) {\n            setAudioUrl(e.data);\n            setOnRec(true);\n            onRecordingStop({\n              recordingIndex: undefined,\n              // 녹음 중지 시점의 recordingIndex 설정\n              stringIndex: \"Corresponding stringArray: undefined\" // 녹음 중지 시점의 stringIndex 설정\n            });\n          };\n        } else {\n          setOnRec(false);\n        }\n      };\n    });\n  };\n  const offRecAudio = () => {\n    media.ondataavailable = function (e) {\n      setAudioUrl(e.data);\n      setOnRec(true);\n    };\n    stream.getAudioTracks().forEach(function (track) {\n      track.stop();\n    });\n    media.stop();\n    analyser.disconnect();\n    source.disconnect();\n  };\n  const onSubmitAudioFile = useCallback(() => {\n    if (audioUrl) {\n      console.log(URL.createObjectURL(audioUrl));\n    }\n    const sound = new File([audioUrl], \"soundBlob\", {\n      lastModified: new Date().getTime(),\n      type: \"audio\"\n    });\n    console.log(sound);\n  }, [audioUrl]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onRec ? onRecAudio : offRecAudio,\n      children: \"\\uB179\\uC74C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onSubmitAudioFile,\n      children: \"\\uACB0\\uACFC \\uD655\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(AudioRecord, \"Ym7lBIG9wpNpsfr11t0+46zJZ8A=\");\n_c = AudioRecord;\nexport default AudioRecord;\nvar _c;\n$RefreshReg$(_c, \"AudioRecord\");","map":{"version":3,"names":["React","useState","useCallback","jsxDEV","_jsxDEV","Fragment","_Fragment","AudioRecord","setPause","onRecordingStop","_s","stream","setStream","media","setMedia","onRec","setOnRec","source","setSource","analyser","setAnalyser","audioUrl","setAudioUrl","onRecAudio","audioCtx","window","AudioContext","webkitAudioContext","createScriptProcessor","makeSound","createMediaStreamSource","connect","destination","navigator","mediaDevices","getUserMedia","audio","then","mediaRecorder","MediaRecorder","start","onaudioprocess","e","playbackTime","getAudioTracks","forEach","track","stop","disconnect","ondataavailable","data","recordingIndex","undefined","stringIndex","offRecAudio","onSubmitAudioFile","console","log","URL","createObjectURL","sound","File","lastModified","Date","getTime","type","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macpro/Desktop/sc_cd/src/audioRecode.js"],"sourcesContent":["// audioRecode.js\n\nimport React, { useState, useCallback } from \"react\";\n\nconst AudioRecord = ({ setPause, onRecordingStop }) => {\n  const [stream, setStream] = useState();\n  const [media, setMedia] = useState();\n  const [onRec, setOnRec] = useState(true);\n  const [source, setSource] = useState();\n  const [analyser, setAnalyser] = useState();\n  const [audioUrl, setAudioUrl] = useState();\n\n  const onRecAudio = () => {\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\n    setAnalyser(analyser);\n\n    function makeSound(stream) {\n      const source = audioCtx.createMediaStreamSource(stream);\n      setSource(source);\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n    }\n\n    navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      setStream(stream);\n      setMedia(mediaRecorder);\n      makeSound(stream);\n\n      analyser.onaudioprocess = function (e) {\n        if (e.playbackTime > 180) {\n          stream.getAudioTracks().forEach(function (track) {\n            track.stop();\n          });\n          mediaRecorder.stop();\n          analyser.disconnect();\n          audioCtx.createMediaStreamSource(stream).disconnect();\n\n          mediaRecorder.ondataavailable = function (e) {\n            setAudioUrl(e.data);\n            setOnRec(true);\n            onRecordingStop({\n              recordingIndex: undefined, // 녹음 중지 시점의 recordingIndex 설정\n              stringIndex: \"Corresponding stringArray: undefined\", // 녹음 중지 시점의 stringIndex 설정\n            });\n          };\n        } else {\n          setOnRec(false);\n        }\n      };\n    });\n  };\n\n  const offRecAudio = () => {\n    media.ondataavailable = function (e) {\n      setAudioUrl(e.data);\n      setOnRec(true);\n    };\n\n    stream.getAudioTracks().forEach(function (track) {\n      track.stop();\n    });\n\n    media.stop();\n    analyser.disconnect();\n    source.disconnect();\n  };\n\n  const onSubmitAudioFile = useCallback(() => {\n    if (audioUrl) {\n      console.log(URL.createObjectURL(audioUrl));\n    }\n    const sound = new File([audioUrl], \"soundBlob\", {\n      lastModified: new Date().getTime(),\n      type: \"audio\",\n    });\n    console.log(sound);\n  }, [audioUrl]);\n\n  return (\n    <>\n      <button onClick={onRec ? onRecAudio : offRecAudio}>녹음</button>\n      <button onClick={onSubmitAudioFile}>결과 확인</button>\n    </>\n  );\n};\n\nexport default AudioRecord;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}